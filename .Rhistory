dat04$grupo[dat04$FL_21_DO_merit_perc_pref_julio19v02==1] <- 2
dat04$grupo[dat04$FL_21_DO_merit_perc_pref_julio19v03==1] <- 3
dat04$perc_effort <- rowSums(dat04[,c(matches(match = "perc_effort",vars = names(dat04)))],na.rm = TRUE)
dat04$perc_talent <- rowSums(dat04[,c(matches(match = "perc_talent",vars = names(dat04)))],na.rm = TRUE)
dat04$perc_wpart  <- rowSums(dat04[,c(matches(match = "perc_wpart" ,vars = names(dat04)))],na.rm = TRUE)
dat04$perc_netw   <- rowSums(dat04[,c(matches(match = "perc_netw"  ,vars = names(dat04)))],na.rm = TRUE)
dat04$pref_effort <- rowSums(dat04[,c(matches(match = "pref_effort",vars = names(dat04)))],na.rm = TRUE)
dat04$pref_talent <- rowSums(dat04[,c(matches(match = "pref_talent",vars = names(dat04)))],na.rm = TRUE)
dat04$pref_wpart  <- rowSums(dat04[,c(matches(match = "pref_wpart" ,vars = names(dat04)))],na.rm = TRUE)
dat04$pref_netw   <- rowSums(dat04[,c(matches(match = "pref_netw"  ,vars = names(dat04)))],na.rm = TRUE)
dat04[dat04==0] <- NA
dim(dat01)[1]
dim(dat02)[1]
dim(dat03)[1]
dim(dat04)[1]
knitr::opts_chunk$set(warning = FALSE,message = FALSE, cache = TRUE)
knitr::opts_knit$set(root.dir = "../")
options(scipen=999)
rm(list=ls())
options(knitr.kable.NA = '')
rmarkdown::render(input = "production/prod_analysis-cfa.Rmd",output_format = "html_document")
rmarkdown::render(input = "production/prod_analysis-cfa.Rmd",output_format = "html_document")
rmarkdown::render(input = "production/prod_analysis-cfa.Rmd",output_format = "html_document")
cor01<-polychoric(dat01)
rownames(cor01$rho) <- c("1. pc_effort", "2. pc_talent","3. pc_wpart","4. pc_netw","5. pf_effort","6. pf_talent","7. pf_wpart", "8. pf_netw")
colnames(cor01$rho) <- c("(1)", "(2)","(3)","(4)","(5)","(6)","(7)", "(8)")
corrplot(cor01$rho,method = "color" ,type = "upper", tl.col = "black", addCoef.col = "black",diag = FALSE)
rmarkdown::render(input = "production/prod_analysis-cfa.Rmd",output_format = "html_document")
# Chunk 2
knitr::opts_chunk$set(warning = FALSE,message = FALSE, cache = TRUE)
knitr::opts_knit$set(root.dir = "../")
options(scipen=999)
rm(list=ls())
options(knitr.kable.NA = '')
# Chunk 3
library(sjPlot)
library(dplyr)
library(lavaan)
library(stargazer)
library(corrplot)
library(psych)
library(knitr)
library(kableExtra)
# Chunk 4
data01 <- sjlabelled::read_spss(path = "input/data/original/Estudio_3_ola1.sav",verbose = FALSE)
dat01 <- data01 %>% filter(Intro==1,Finished==1) %>% select(starts_with("meritv01"))   %>% na.omit()
dat02 <- data01 %>% filter(Intro==1,Finished==1) %>% select(starts_with("meritv02"))   %>% na.omit()
dat03 <- data01 %>% filter(Intro==1,Finished==1) %>% select(starts_with("meritv03_p")) %>% na.omit()
# - Nos quedamos solamente con los casos que ACEPTARON participar y terminaron el cuestionario.
# - Para dejar una base que contenga solamente los casos que tienen información completa en los ítems usamos na.omit()
dat04 <- data01 %>% filter(Intro==1) %>%
select(starts_with("meritv01"),
starts_with("meritv02"),
starts_with("meritv03_p"),
starts_with("FL_21_DO"))
dat04$grupo <- NA
dat04$grupo[dat04$FL_21_DO_merit_perc_pref_julio19v01==1] <- 1
dat04$grupo[dat04$FL_21_DO_merit_perc_pref_julio19v02==1] <- 2
dat04$grupo[dat04$FL_21_DO_merit_perc_pref_julio19v03==1] <- 3
dat04$perc_effort <- rowSums(dat04[,c(matches(match = "perc_effort",vars = names(dat04)))],na.rm = TRUE)
dat04$perc_talent <- rowSums(dat04[,c(matches(match = "perc_talent",vars = names(dat04)))],na.rm = TRUE)
dat04$perc_wpart  <- rowSums(dat04[,c(matches(match = "perc_wpart" ,vars = names(dat04)))],na.rm = TRUE)
dat04$perc_netw   <- rowSums(dat04[,c(matches(match = "perc_netw"  ,vars = names(dat04)))],na.rm = TRUE)
dat04$pref_effort <- rowSums(dat04[,c(matches(match = "pref_effort",vars = names(dat04)))],na.rm = TRUE)
dat04$pref_talent <- rowSums(dat04[,c(matches(match = "pref_talent",vars = names(dat04)))],na.rm = TRUE)
dat04$pref_wpart  <- rowSums(dat04[,c(matches(match = "pref_wpart" ,vars = names(dat04)))],na.rm = TRUE)
dat04$pref_netw   <- rowSums(dat04[,c(matches(match = "pref_netw"  ,vars = names(dat04)))],na.rm = TRUE)
dat04[dat04==0] <- NA
# Chunk 5
stargazer(dat01,type = "html",
title = "Estadísticos descriptivos",
font.size = "small",
median = TRUE,
header=FALSE,
decimal.mark = ",",
digit.separator = "",
digits = 2,
covariate.labels = c("1. pc.effort", "2. pc.talent","3. pc.wpart","4. pc.netw","5. pf.effort","6. pf.talent","7. pf.wpart", "8. pf.netw"))
# Chunk 6
# tab01 <- apaTables::apa.cor.table(data = dat01,show.conf.interval = FALSE)
# body01<- data.frame(tab01$table.body)         # select M SD and correlation
# body02<- body01 %>%  filter(!(Variable==" ")) # drop confidence intervals
# kable(body02,format = "html",row.names = FALSE,align = "lccccccccc",col.names = c("Variable","M","DS","1","2","3","4","5","6","7")) %>% kable_styling()
cor01<-polychoric(dat01)
rownames(cor01$rho) <- c("1. pc_effort", "2. pc_talent","3. pc_wpart","4. pc_netw","5. pf_effort","6. pf_talent","7. pf_wpart", "8. pf_netw")
colnames(cor01$rho) <- c("(1)", "(2)","(3)","(4)","(5)","(6)","(7)", "(8)")
corrplot(cor01$rho,method = "color" ,type = "upper", tl.col = "black", addCoef.col = "black",diag = FALSE)
model01 <- 'perc_merit=~meritv01_perc_effort+meritv01_perc_talent
perc_nmerit=~meritv01_perc_wpart+meritv01_perc_netw
pref_merit=~meritv01_pref_effort+meritv01_pref_talent
pref_nmerit=~meritv01_pref_wpart+meritv01_pref_netw'
fit1_c <- cfa(model = model01,data = dat01,estimator="MLR") # Continuo/ estimador ML Robust
fit1_o <- cfa(model = model01,data = dat01,
ordered = c("meritv01_perc_effort","meritv01_perc_talent",
"meritv01_perc_wpart","meritv01_perc_netw",
"meritv01_pref_effort","meritv01_pref_talent",
"meritv01_pref_wpart","meritv01_pref_netw"))
#---------------------------------------------------#
cnames <- c("Factor","Indicador","Loading (MLR)","Loading (DWLS)")
kable(left_join(x = standardizedsolution(fit1_c) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),y = standardizedsolution(fit1_o) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),c("lhs","rhs")),
format = "markdown",digits = 2,col.names = cnames)
stargazer(dat02,type = "html")
cor02<-polychoric(dat02)
rownames(cor02$rho) <-c("1. pc_effort", "2. pc_talent","3. pc_wpart","4. pc_netw","5. pf_effort","6. pf_talent","7. pf_wpart", "8. pf_netw")
colnames(cor02$rho) <-c("(1)", "(2)","(3)","(4)","(5)","(6)","(7)", "(8)")
corrplot(cor02$rho,method = "color", type = "upper", tl.col = "black", addCoef.col = "black",diag = FALSE)
model02 <- 'perc_merit=~meritv02_perc_effort+meritv02_perc_talent
perc_nmerit=~meritv02_perc_wpart+meritv02_perc_netw
pref_merit=~meritv02_pref_effort+meritv02_pref_talent
pref_nmerit=~meritv02_pref_wpart+meritv02_pref_netw'
fit2_c <- cfa(model = model02,data = dat02,estimator="MLR") # Continuo/ estimador ML Robust
fit2_o <- cfa(model = model02,data = dat02,ordered = c("meritv02_perc_effort","meritv02_perc_talent",
"meritv02_perc_wpart"  ,"meritv02_perc_netw",
"meritv02_pref_effort" ,"meritv02_pref_talent",
"meritv02_pref_wpart"  ,"meritv02_pref_netw"))
#---------------------------------------------------#
cnames <- c("Factor","Indicador","Loading (MLR)","Loading (DWLS)")
kable(left_join(x = standardizedsolution(fit2_c) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),y = standardizedsolution(fit2_o) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),c("lhs","rhs")),
format = "markdown",digits = 2,col.names = cnames)
stargazer(dat03,type = "html",median = TRUE)
cor03<-polychoric(dat03)
rownames(cor03$rho) <-c("1. pc_effort", "2. pc_talent","3. pc_wpart","4. pc_netw","5. pf_effort","6. pf_talent","7. pf_wpart", "8. pf_netw")
colnames(cor03$rho) <-c("(1)", "(2)","(3)","(4)","(5)","(6)","(7)", "(8)")
corrplot(cor03$rho,method = "color", type = "upper", tl.col = "black", addCoef.col = "black",diag = FALSE)
model03 <- '
perc_merit=~meritv03_perc_effort+meritv03_perc_talent
perc_nmerit=~meritv03_perc_wpart+meritv03_perc_netw
pref_merit=~meritv03_pref_effort+meritv03_pref_talent
pref_nmerit=~meritv03_pref_wpart+meritv03_pref_netw'
fit3_c <- cfa(model = model03,data = dat03,estimator="MLR",std.lv=FALSE) # Continuo/ estimador ML Robust
fit3_o <- cfa(model = model03,data = dat03,ordered = c("meritv03_perc_effort","meritv03_perc_talent",
"meritv03_perc_wpart","meritv03_perc_netw",
"meritv03_pref_effort","meritv03_pref_talent",
"meritv03_pref_wpart","meritv03_pref_netw"),std.lv=FALSE)
#---------------------------------------------------#
cnames <- c("Factor","Indicador","Loading (MLR)","Loading (DWLS)")
kable(left_join(x = standardizedsolution(fit3_c) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),y = standardizedsolution(fit3_o) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),c("lhs","rhs")),
format = "markdown",digits = 2,col.names = cnames)
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "merit-scale"
# 2. Run this code.
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "merit-scale"
# 2. Run this code.
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "merit-scale"
# 2. Run this code.
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "merit-scale"
# 2. Run this code.
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
source(file = "render-site.R")
source(file = "render-site.R")
stargazer(dat02,type = "html",
title = "Estadísticos descriptivos",
font.size = "small",
median = TRUE,
header=FALSE,
decimal.mark = ",",
digit.separator = "",
digits = 2,
covariate.labels = c("1. pc.effort", "2. pc.talent","3. pc.wpart","4. pc.netw","5. pf.effort","6. pf.talent","7. pf.wpart", "8. pf.netw"))
stargazer(dat03,type = "html",
title = "Estadísticos descriptivos",
font.size = "small",
median = TRUE,
header=FALSE,
decimal.mark = ",",
digit.separator = "",
digits = 2,
covariate.labels = c("1. pc.effort", "2. pc.talent","3. pc.wpart","4. pc.netw","5. pf.effort","6. pf.talent","7. pf.wpart", "8. pf.netw"))
stargazer(select(dat04,perc_effort,perc_talent,perc_wpart,perc_netw,pref_effort,pref_talent,pref_wpart,pref_netw),
type = "html",
title = "Estadísticos descriptivos",
font.size = "small",
median = TRUE,
header=FALSE,
decimal.mark = ",",
digit.separator = "",
digits = 2,
covariate.labels = c("1. pc.effort", "2. pc.talent","3. pc.wpart","4. pc.netw","5. pf.effort","6. pf.talent","7. pf.wpart", "8. pf.netw"))
source(file = "render-site.R")
source(file = "render-site.R")
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
stargazer(dat01,type = "html",
title = "Descriptive statistics",
font.size = "small",
median = TRUE,
header=FALSE,
decimal.mark = ",",
digit.separator = "",
digits = 2,
covariate.labels = c("1. pc.effort", "2. pc.talent","3. pc.wpart","4. pc.netw","5. pf.effort","6. pf.talent","7. pf.wpart", "8. pf.netw"))
cor01<-polychoric(dat01)
rownames(cor01$rho) <- c("1. pc_effort", "2. pc_talent","3. pc_wpart","4. pc_netw","5. pf_effort","6. pf_talent","7. pf_wpart", "8. pf_netw")
colnames(cor01$rho) <- c("(1)", "(2)","(3)","(4)","(5)","(6)","(7)", "(8)")
corrplot(cor01$rho,method = "color" ,type = "upper", tl.col = "black", addCoef.col = "black",diag = FALSE)
model01 <- 'perc_merit=~meritv01_perc_effort+meritv01_perc_talent
perc_nmerit=~meritv01_perc_wpart+meritv01_perc_netw
pref_merit=~meritv01_pref_effort+meritv01_pref_talent
pref_nmerit=~meritv01_pref_wpart+meritv01_pref_netw'
fit1_c <- cfa(model = model01,data = dat01,estimator="MLR") # Continuo/ estimador ML Robust
fit1_o <- cfa(model = model01,data = dat01,
ordered = c("meritv01_perc_effort","meritv01_perc_talent",
"meritv01_perc_wpart","meritv01_perc_netw",
"meritv01_pref_effort","meritv01_pref_talent",
"meritv01_pref_wpart","meritv01_pref_netw"))
#---------------------------------------------------#
cnames <- c("Factor","Indicador","Loading (MLR)","Loading (DWLS)")
kable(left_join(x = standardizedsolution(fit1_c) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),y = standardizedsolution(fit1_o) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),c("lhs","rhs")),
format = "markdown",digits = 2,col.names = cnames, caption = "Factor loadings")
kable(left_join(x = standardizedsolution(fit1_c) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),y = standardizedsolution(fit1_o) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),c("lhs","rhs")),
format = "markdown",digits = 2,col.names = cnames, caption = "Factor loadings")
source("render-site.R")
source("render-site.R")
source("render-site.R")
source("render-site.R")
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "merit-scale"
# 2. Run this code.
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "merit-scale"
# 2. Run this code.
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "merit-scale"
# 2. Run this code.
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
source("render-site.R")
source("render-site.R")
source("render-site.R")
source("render-site.R")
sum_fitw02<- bind_rows(fitmeasures(fitw02a_c)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02a_o)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02b_c)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02b_o)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02c_c)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02c_c)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02_c)[ c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02_o)[ c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],)
sum_fitw02$mod <- c("Model 1","Model 1","Model 2","Model 2","Model 3","Model 3","Model 4","Model 4")
sum_fitw02$est <- c("Continuous","Ordinal","Continuous","Ordinal","Continuous","Ordinal","Continuous","Ordinal")
sum_fitw02 <- select(sum_fitw02,mod,est,everything())
sum_fitw02<- bind_rows(fitmeasures(fitw02a_c)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02a_o)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02b_c)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02b_o)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02c_c)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02c_c)[c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02_c)[ c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],
fitmeasures(fitw02_o)[ c("cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")],)
sum_fitw02$mod <- c("Model 1","Model 1","Model 2","Model 2","Model 3","Model 3","Model 4","Model 4")
sum_fitw02$est <- c("Continuous","Ordinal","Continuous","Ordinal","Continuous","Ordinal","Continuous","Ordinal")
sum_fitw02 <- select(sum_fitw02,mod,est,everything())
kable(sum_fitw02,digits = 3,format = "html",row.names = F,booktabs=T, caption = "Summary fit indices wave 02") %>%
kable_styling(full_width = F) %>%
collapse_rows(columns = 1,valign = "middle") %>%
footnote(number = c("Model 1: Control group sample",
"Model 2: Poverty treatment condition sample",
"Model 3: Inequality treatment condition sample",
"Model 4: Complete sample"))
source("render-site.R")
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "merit-scale"
# 2. Run this code.
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "merit-scale"
# 2. Run this code.
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs") # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",x = dir(path = "docs"),value = T), # for .Rmd
".tex",".log")                                            # for .tex and .log
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files
}
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
