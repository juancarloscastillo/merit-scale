size <- 10
drawText(x = 1.4+adj_x, y = 1.75-adj_y, text = paste0("Estimator: DWLS", ", N=",nobs(fit4_o)),family = "serif",size = size)
drawText(x = 2.3+adj_x, y = 1.59-adj_y, text = paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
drawText(x = 1.0+adj_x, y = 1.43-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("output/images/meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
nodeNames <-c("Perception effort","Perception talent","Perception rich family","Perception contacts",
"Preference effort","Preference talent","Preference rich family","Preference contacts",
"Perception \n meritocratic","Perception \n non meritocratic","Preference \n meritocratic","Preference \n non meritocratic")
graphics.off()
fm03<- data.frame(v1=fitmeasures(fit4_o, output ="matrix")[c("chisq.scaled","df","cfi.scaled","rmsea.scaled"),])
fm03 <- round(fm03,3)
par(mai = c(2,2,2,2)) # Set the margin on all sides to 2
par(mar = c(5, 5, 5, 5)) # Set the margin on all sides to 6
layout(matrix(c(1, # semPlot
1, # semPlot
1,
1,
1,
2),# ajuste
nrow=6,
byrow=TRUE))
layout.show(n = 2)
semPaths(
fit4_o ,
# whatLabels = "std", # Indica si aparecen los valores
what = "mod",
label.cex = 1.3, # Tamaño de las etiquetas dentro de los nodos.
edge.label.cex =  0.8, #  0.8 Tamaño de los valores estimados.
residuals = T,
optimizeLatRes =F,
edge.color = "black",
style = "lisrel",
nCharNodes = 0,
curvePivot = F,
curve = 2.3,
rotation = 4,
layout = "tree2",
cardinal = "lat cov",
legend.cex = 0.6, # 0.6
label.cex = 1,
label.font = 6,
edge.label.font = 14,
asize = 3,
edge.width = 1.2,
sizeMan = 8,# largo manifest
sizeMan2= 8,# alto manifest
sizeLat = 5.5, # largo de los circulos
sizeLat2 = 25, # alto de los circulos
residScale = 10,
width = 21.5, # 17
height = 10, # 10
# nodeNames = nodeNames,
intercepts = F,
reorder = T,
thresholds = F,
fixedStyle =1,
node.height = 1,
node.width = 4,
label.scale = F,
shapeMan = "rectangle",
shapeLat = "ellipse",
nodeLabels = nodeNames,
details = T)
ld<- standardizedsolution(fit4_o) %>% select(lhs,op,rhs,est.std) %>% filter(op=="=~")
ld$est.std<- sprintf("%.2f", ld$est.std)
#pegar cargas factoriales al plot
text(x = -0.1,y =  1.00, ld$est.std[1],font = 5,cex = 1.20)
text(x = -0.1,y =  0.85, ld$est.std[2],font = 5,cex = 1.20)
text(x = -0.1,y =  0.43, ld$est.std[3],font = 5,cex = 1.20)
text(x = -0.1,y =  0.26, ld$est.std[4],font = 5,cex = 1.20)
text(x = -0.1,y = -0.15, ld$est.std[5],font = 5,cex = 1.20)
text(x = -0.1,y = -0.30, ld$est.std[6],font = 5,cex = 1.20)
text(x = -0.1,y = -0.73, ld$est.std[7],font = 5,cex = 1.20)
text(x = -0.1,y = -0.88, ld$est.std[8],font = 5,cex = 1.20)
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
# paste0("Estimator DWLS", ", N=",nobs(fit4_o))
# paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,])
# paste0("***p<0.001")
#pegar texto fit en rectangulo
size <- 10
drawText(x = 1.4+adj_x, y = 1.75-adj_y, text = paste0("Estimator: DWLS", ", N=",nobs(fit4_o)),family = "serif",size = size)
drawText(x = 2.3+adj_x, y = 1.59-adj_y, text = paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
drawText(x = 1.0+adj_x, y = 1.43-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("output/images/meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
nodeNames <-c("Perception effort","Perception talent","Perception rich family","Perception contacts",
"Preference effort","Preference talent","Preference rich family","Preference contacts",
"Perception \n meritocratic","Perception \n non meritocratic","Preference \n meritocratic","Preference \n non meritocratic")
graphics.off()
fm03<- data.frame(v1=fitmeasures(fit4_o, output ="matrix")[c("chisq.scaled","df","cfi.scaled","rmsea.scaled"),])
fm03 <- round(fm03,3)
par(mai = c(2,2,2,2)) # Set the margin on all sides to 2
par(mar = c(5, 5, 5, 5)) # Set the margin on all sides to 6
layout(matrix(c(1, # semPlot
1, # semPlot
1,
1,
1,
2),# ajuste
nrow=6,
byrow=TRUE))
layout.show(n = 2)
semPaths(
fit4_o ,
# whatLabels = "std", # Indica si aparecen los valores
what = "mod",
label.cex = 1.3, # Tamaño de las etiquetas dentro de los nodos.
edge.label.cex =  0.8, #  0.8 Tamaño de los valores estimados.
residuals = T,
optimizeLatRes =F,
edge.color = "black",
style = "lisrel",
nCharNodes = 0,
curvePivot = F,
curve = 2.4,
rotation = 4,
layout = "tree2",
cardinal = "lat cov",
legend.cex = 0.6, # 0.6
label.cex = 1,
label.font = 6,
edge.label.font = 14,
asize = 3,
edge.width = 1.2,
sizeMan = 8,# largo manifest
sizeMan2= 8,# alto manifest
sizeLat = 5.5, # largo de los circulos
sizeLat2 = 25, # alto de los circulos
residScale = 10,
width = 21.5, # 17
height = 10, # 10
# nodeNames = nodeNames,
intercepts = F,
reorder = T,
thresholds = F,
fixedStyle =1,
node.height = 1,
node.width = 4,
label.scale = F,
shapeMan = "rectangle",
shapeLat = "ellipse",
nodeLabels = nodeNames,
details = T)
ld<- standardizedsolution(fit4_o) %>% select(lhs,op,rhs,est.std) %>% filter(op=="=~")
ld$est.std<- sprintf("%.2f", ld$est.std)
#pegar cargas factoriales al plot
text(x = -0.1,y =  1.00, ld$est.std[1],font = 5,cex = 1.20)
text(x = -0.1,y =  0.85, ld$est.std[2],font = 5,cex = 1.20)
text(x = -0.1,y =  0.43, ld$est.std[3],font = 5,cex = 1.20)
text(x = -0.1,y =  0.26, ld$est.std[4],font = 5,cex = 1.20)
text(x = -0.1,y = -0.15, ld$est.std[5],font = 5,cex = 1.20)
text(x = -0.1,y = -0.30, ld$est.std[6],font = 5,cex = 1.20)
text(x = -0.1,y = -0.73, ld$est.std[7],font = 5,cex = 1.20)
text(x = -0.1,y = -0.88, ld$est.std[8],font = 5,cex = 1.20)
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
# paste0("Estimator DWLS", ", N=",nobs(fit4_o))
# paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,])
# paste0("***p<0.001")
#pegar texto fit en rectangulo
size <- 10
drawText(x = 1.4+adj_x, y = 1.75-adj_y, text = paste0("Estimator: DWLS", ", N=",nobs(fit4_o)),family = "serif",size = size)
drawText(x = 2.3+adj_x, y = 1.59-adj_y, text = paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
drawText(x = 1.0+adj_x, y = 1.43-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("output/images/meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
nodeNames <-c("Perception effort","Perception talent","Perception rich family","Perception contacts",
"Preference effort","Preference talent","Preference rich family","Preference contacts",
"Perception \n meritocratic","Perception \n non meritocratic","Preference \n meritocratic","Preference \n non meritocratic")
graphics.off()
fm03<- data.frame(v1=fitmeasures(fit4_o, output ="matrix")[c("chisq.scaled","df","cfi.scaled","rmsea.scaled"),])
fm03 <- round(fm03,3)
par(mai = c(2,2,2,2)) # Set the margin on all sides to 2
par(mar = c(5, 5, 5, 5)) # Set the margin on all sides to 6
layout(matrix(c(1, # semPlot
1, # semPlot
1,
1,
1,
2),# ajuste
nrow=6,
byrow=TRUE))
layout.show(n = 2)
semPaths(
fit4_o ,
# whatLabels = "std", # Indica si aparecen los valores
what = "mod",
label.cex = 1.3, # Tamaño de las etiquetas dentro de los nodos.
edge.label.cex =  0.8, #  0.8 Tamaño de los valores estimados.
residuals = T,
optimizeLatRes =F,
edge.color = "black",
style = "lisrel",
nCharNodes = 0,
curvePivot = F,
curve = 2.4,
rotation = 4,
layout = "tree2",
cardinal = "lat cov",
legend.cex = 0.6, # 0.6
label.cex = 1,
label.font = 6,
edge.label.font = 14,
asize = 3,
edge.width = 1.2,
sizeMan = 8,# largo manifest
sizeMan2= 8,# alto manifest
sizeLat = 5.5, # largo de los circulos
sizeLat2 = 25, # alto de los circulos
residScale = 10,
width = 21.5, # 17
height = 10, # 10
# nodeNames = nodeNames,
intercepts = F,
reorder = T,
thresholds = F,
fixedStyle =1,
node.height = 1,
node.width = 4,
label.scale = F,
shapeMan = "rectangle",
shapeLat = "ellipse",
nodeLabels = nodeNames,
details = T)
ld<- standardizedsolution(fit4_o) %>% select(lhs,op,rhs,est.std) %>% filter(op=="=~")
ld$est.std<- sprintf("%.2f", ld$est.std)
#pegar cargas factoriales al plot
text(x = -0.1,y =  1.00, ld$est.std[1],font = 5,cex = 1.20)
text(x = -0.1,y =  0.85, ld$est.std[2],font = 5,cex = 1.20)
text(x = -0.1,y =  0.43, ld$est.std[3],font = 5,cex = 1.20)
text(x = -0.1,y =  0.26, ld$est.std[4],font = 5,cex = 1.20)
text(x = -0.1,y = -0.15, ld$est.std[5],font = 5,cex = 1.20)
text(x = -0.1,y = -0.30, ld$est.std[6],font = 5,cex = 1.20)
text(x = -0.1,y = -0.73, ld$est.std[7],font = 5,cex = 1.20)
text(x = -0.1,y = -0.88, ld$est.std[8],font = 5,cex = 1.20)
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
# paste0("Estimator DWLS", ", N=",nobs(fit4_o))
# paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,])
# paste0("***p<0.001")
#pegar texto fit en rectangulo
size <- 10
drawText(x = 1.4+adj_x, y = 1.75-adj_y, text = paste0("Estimator: DWLS", ", N=",nobs(fit4_o)),family = "serif",size = size)
drawText(x = 2.3+adj_x, y = 1.59-adj_y, text = paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
drawText(x = 1.0+adj_x, y = 1.43-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("output/images/meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
nodeNames <-c("Perception effort","Perception talent","Perception rich family","Perception contacts",
"Preference effort","Preference talent","Preference rich family","Preference contacts",
"Perception \n meritocratic","Perception \n non meritocratic","Preference \n meritocratic","Preference \n non meritocratic")
graphics.off()
fm03<- data.frame(v1=fitmeasures(fit4_o, output ="matrix")[c("chisq.scaled","df","cfi.scaled","rmsea.scaled"),])
fm03 <- round(fm03,3)
par(mai = c(2,2,2,2)) # Set the margin on all sides to 2
par(mar = c(5, 5, 5, 5)) # Set the margin on all sides to 6
layout(matrix(c(1, # semPlot
1, # semPlot
1,
1,
1,
2),# ajuste
nrow=6,
byrow=TRUE))
layout.show(n = 2)
semPaths(
fit4_o ,
# whatLabels = "std", # Indica si aparecen los valores
what = "mod",
label.cex = 1.3, # Tamaño de las etiquetas dentro de los nodos.
edge.label.cex =  0.8, #  0.8 Tamaño de los valores estimados.
residuals = T,
optimizeLatRes =F,
edge.color = "black",
style = "lisrel",
nCharNodes = 0,
curvePivot = F,
curve = 2.5,
rotation = 4,
layout = "tree2",
cardinal = "lat cov",
legend.cex = 0.6, # 0.6
label.cex = 1,
label.font = 6,
edge.label.font = 14,
asize = 3,
edge.width = 1.2,
sizeMan = 8,# largo manifest
sizeMan2= 8,# alto manifest
sizeLat = 5.5, # largo de los circulos
sizeLat2 = 25, # alto de los circulos
residScale = 10,
width = 21.5, # 17
height = 10, # 10
# nodeNames = nodeNames,
intercepts = F,
reorder = T,
thresholds = F,
fixedStyle =1,
node.height = 1,
node.width = 4,
label.scale = F,
shapeMan = "rectangle",
shapeLat = "ellipse",
nodeLabels = nodeNames,
details = T)
ld<- standardizedsolution(fit4_o) %>% select(lhs,op,rhs,est.std) %>% filter(op=="=~")
ld$est.std<- sprintf("%.2f", ld$est.std)
#pegar cargas factoriales al plot
text(x = -0.1,y =  1.00, ld$est.std[1],font = 5,cex = 1.20)
text(x = -0.1,y =  0.85, ld$est.std[2],font = 5,cex = 1.20)
text(x = -0.1,y =  0.43, ld$est.std[3],font = 5,cex = 1.20)
text(x = -0.1,y =  0.26, ld$est.std[4],font = 5,cex = 1.20)
text(x = -0.1,y = -0.15, ld$est.std[5],font = 5,cex = 1.20)
text(x = -0.1,y = -0.30, ld$est.std[6],font = 5,cex = 1.20)
text(x = -0.1,y = -0.73, ld$est.std[7],font = 5,cex = 1.20)
text(x = -0.1,y = -0.88, ld$est.std[8],font = 5,cex = 1.20)
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
# paste0("Estimator DWLS", ", N=",nobs(fit4_o))
# paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,])
# paste0("***p<0.001")
#pegar texto fit en rectangulo
size <- 10
drawText(x = 1.4+adj_x, y = 1.75-adj_y, text = paste0("Estimator: DWLS", ", N=",nobs(fit4_o)),family = "serif",size = size)
drawText(x = 2.3+adj_x, y = 1.59-adj_y, text = paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
drawText(x = 1.0+adj_x, y = 1.43-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("output/images/meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
nodeNames <-c("Perception effort","Perception talent","Perception rich family","Perception contacts",
"Preference effort","Preference talent","Preference rich family","Preference contacts",
"Perception \n meritocratic","Perception \n non meritocratic","Preference \n meritocratic","Preference \n non meritocratic")
graphics.off()
fm03<- data.frame(v1=fitmeasures(fit4_o, output ="matrix")[c("chisq.scaled","df","cfi.scaled","rmsea.scaled"),])
fm03 <- round(fm03,3)
par(mai = c(2,2,2,2)) # Set the margin on all sides to 2
par(mar = c(5, 5, 5, 5)) # Set the margin on all sides to 6
layout(matrix(c(1, # semPlot
1, # semPlot
1,
1,
1,
2),# ajuste
nrow=6,
byrow=TRUE))
layout.show(n = 2)
semPaths(
fit4_o ,
# whatLabels = "std", # Indica si aparecen los valores
what = "mod",
label.cex = 1.3, # Tamaño de las etiquetas dentro de los nodos.
edge.label.cex =  0.8, #  0.8 Tamaño de los valores estimados.
residuals = T,
optimizeLatRes =F,
edge.color = "black",
style = "lisrel",
nCharNodes = 0,
curvePivot = F,
curve = 2.5,
rotation = 4,
layout = "tree2",
cardinal = "lat cov",
legend.cex = 0.6, # 0.6
label.cex = 1,
label.font = 6,
edge.label.font = 14,
asize = 3,
edge.width = 1.2,
sizeMan = 8,# largo manifest
sizeMan2= 8,# alto manifest
sizeLat = 5.5, # largo de los circulos
sizeLat2 = 25, # alto de los circulos
residScale = 10,
width = 21.5, # 17
height = 10, # 10
# nodeNames = nodeNames,
intercepts = F,
reorder = T,
thresholds = F,
fixedStyle =1,
node.height = 1,
node.width = 4,
label.scale = F,
shapeMan = "rectangle",
shapeLat = "ellipse",
nodeLabels = nodeNames,
details = T)
ld<- standardizedsolution(fit4_o) %>% select(lhs,op,rhs,est.std) %>% filter(op=="=~")
ld$est.std<- sprintf("%.2f", ld$est.std)
#pegar cargas factoriales al plot
text(x = -0.1,y =  1.00, ld$est.std[1],font = 5,cex = 1.20)
text(x = -0.1,y =  0.85, ld$est.std[2],font = 5,cex = 1.20)
text(x = -0.1,y =  0.43, ld$est.std[3],font = 5,cex = 1.20)
text(x = -0.1,y =  0.26, ld$est.std[4],font = 5,cex = 1.20)
text(x = -0.1,y = -0.15, ld$est.std[5],font = 5,cex = 1.20)
text(x = -0.1,y = -0.30, ld$est.std[6],font = 5,cex = 1.20)
text(x = -0.1,y = -0.73, ld$est.std[7],font = 5,cex = 1.20)
text(x = -0.1,y = -0.88, ld$est.std[8],font = 5,cex = 1.20)
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
# paste0("Estimator DWLS", ", N=",nobs(fit4_o))
# paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,])
# paste0("***p<0.001")
#pegar texto fit en rectangulo
size <- 10
drawText(x = 1.4+adj_x, y = 1.75-adj_y, text = paste0("Estimator: DWLS", ", N=",nobs(fit4_o)),family = "serif",size = size)
drawText(x = 2.3+adj_x, y = 1.59-adj_y, text = paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
drawText(x = 1.0+adj_x, y = 1.43-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("output/images/meas03.png",units = "cm",width = 18,height = 15,ppi = 250)
nodeNames <-c("Perception effort","Perception talent","Perception rich family","Perception contacts",
"Preference effort","Preference talent","Preference rich family","Preference contacts",
"Perception \n meritocratic","Perception \n non meritocratic","Preference \n meritocratic","Preference \n non meritocratic")
graphics.off()
fm03<- data.frame(v1=fitmeasures(fit4_o, output ="matrix")[c("chisq.scaled","df","cfi.scaled","rmsea.scaled"),])
fm03 <- round(fm03,3)
par(mai = c(2,2,2,2)) # Set the margin on all sides to 2
par(mar = c(5, 5, 5, 5)) # Set the margin on all sides to 6
layout(matrix(c(1, # semPlot
1, # semPlot
1,
1,
1,
2),# ajuste
nrow=6,
byrow=TRUE))
layout.show(n = 2)
semPaths(
fit4_o ,
# whatLabels = "std", # Indica si aparecen los valores
what = "mod",
label.cex = 1.3, # Tamaño de las etiquetas dentro de los nodos.
edge.label.cex =  0.8, #  0.8 Tamaño de los valores estimados.
residuals = T,
optimizeLatRes =F,
edge.color = "black",
style = "lisrel",
nCharNodes = 0,
curvePivot = F,
curve = 2.5,
rotation = 4,
layout = "tree2",
cardinal = "lat cov",
legend.cex = 0.6, # 0.6
label.cex = 1,
label.font = 6,
edge.label.font = 14,
asize = 3,
edge.width = 1.2,
sizeMan = 8,# largo manifest
sizeMan2= 8,# alto manifest
sizeLat = 5.5, # largo de los circulos
sizeLat2 = 25, # alto de los circulos
residScale = 10,
width = 21.5, # 17
height = 10, # 10
# nodeNames = nodeNames,
intercepts = F,
reorder = T,
thresholds = F,
fixedStyle =1,
node.height = 1,
node.width = 4,
label.scale = F,
shapeMan = "rectangle",
shapeLat = "ellipse",
nodeLabels = nodeNames,
details = T)
ld<- standardizedsolution(fit4_o) %>% select(lhs,op,rhs,est.std) %>% filter(op=="=~")
ld$est.std<- sprintf("%.2f", ld$est.std)
#pegar cargas factoriales al plot
text(x = -0.1,y =  1.00, ld$est.std[1],font = 5,cex = 1.20)
text(x = -0.1,y =  0.85, ld$est.std[2],font = 5,cex = 1.20)
text(x = -0.1,y =  0.43, ld$est.std[3],font = 5,cex = 1.20)
text(x = -0.1,y =  0.26, ld$est.std[4],font = 5,cex = 1.20)
text(x = -0.1,y = -0.15, ld$est.std[5],font = 5,cex = 1.20)
text(x = -0.1,y = -0.30, ld$est.std[6],font = 5,cex = 1.20)
text(x = -0.1,y = -0.73, ld$est.std[7],font = 5,cex = 1.20)
text(x = -0.1,y = -0.88, ld$est.std[8],font = 5,cex = 1.20)
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
# paste0("Estimator DWLS", ", N=",nobs(fit4_o))
# paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,])
# paste0("***p<0.001")
#pegar texto fit en rectangulo
size <- 10
drawText(x = 1.4+adj_x, y = 1.75-adj_y, text = paste0("Estimator: DWLS", ", N=",nobs(fit4_o)),family = "serif",size = size)
drawText(x = 2.3+adj_x, y = 1.59-adj_y, text = paste0("Model fit: ", "χ²","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
drawText(x = 1.0+adj_x, y = 1.43-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("output/images/meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
source('C:/Users/Julio/Dropbox/papers/merit-scale/render-site.R', echo=TRUE)
source('C:/Users/Julio/Dropbox/papers/merit-scale/render-site.R', echo=TRUE)
