load("C:/Users/Usuario/Dropbox/01 Fondecyt Meritocracia/merit-scale/data/pob_04.RData")
sjPlot::view_df(data)
sjPlot::view_df(data[,c(43,51)])
sjPlot::view_df(data[,c(43:51)])
sjPlot::view_df(data[,c(43:50)])
library(haven)
library(dplyr)
library(sjPlot)
library(psych)
library(lavaan)
library(here)
rm(list=ls())
setwd(here())
source("code/recode_tratamientos.R") # recode original dataset
load(file = "data/pob_04.RData")
for (i in 1:ncol(data)) {
data[,i][data[,i] == c(-99)]  <- NA #Missing
data[,i][data[,i] == c(-999)] <- NA #Missing
}
summary(data)
names(data)
sjPlot::view_df(data)
# Nombres sustantivos variables -------------------------------------------
data <- rename(data,
per_esfuerzo =merit_perc_pref_1,
per_talento  =merit_perc_pref_2,
per_famrica  =merit_perc_pref_3,
per_contact  =merit_perc_pref_4,
pref_esfuerzo=merit_perc_pref_5,
pref_talento =merit_perc_pref_13,
pref_famrica =merit_perc_pref_14,
pref_contact =merit_perc_pref_15,
reduc=pref_redis_taxB_1,
rsalu=pref_redis_taxB_2,
rpens=pref_redis_taxB_3,
rdesi=pref_redis_taxB_4)
data$per_esfuerzo <- as.numeric(data$per_esfuerzo )
data$per_talento  <- as.numeric(data$per_talento  )
data$per_famrica  <- as.numeric(data$per_famrica  )
data$per_contact  <- as.numeric(data$per_contact  )
data$pref_esfuerzo<- as.numeric(data$pref_esfuerzo)
data$pref_talento <- as.numeric(data$pref_talento )
data$pref_famrica <- as.numeric(data$pref_famrica )
data$pref_contact <- as.numeric(data$pref_contact )
# Brechas -----------------------------------------------------------------
data$gap_per <- as.numeric(data$salary_perc_1/data$salary_perc_2)
data$gap_jus <- as.numeric(data$salary_just_1/data$salary_just_2)
data$lngap_per <- as.numeric(log(data$salary_perc_1/data$salary_perc_2))
data$lngap_jus <- as.numeric(log(data$salary_just_1/data$salary_just_2))
data$reduc <- as.numeric(data$reduc)
data$rsalu <- as.numeric(data$rsalu)
data$rpens <- as.numeric(data$rpens)
data$rdesi <- as.numeric(data$rdesi)
cor(x = select(data, c(per_esfuerzo,per_talento,per_famrica,per_contact,pref_esfuerzo,pref_talento,pref_famrica,pref_contact)),use = "complete.obs")
poly1 <- psych::polychoric(select(.data = data, c(per_esfuerzo,per_talento,per_famrica,per_contact,pref_esfuerzo,pref_talento,pref_famrica,pref_contact)),na.rm = TRUE)
corrplot::corrplot(poly1$rho,order = "AOE", type = "lower")
fa1 <- fa(r = poly1$rho,nfactors = 4,rotate = "varimax",fm = "ml")
fa1$loadings
# CFA ---------------------------------------------------------------------
select(data, c(per_esfuerzo,per_talento,per_famrica,per_contact,pref_esfuerzo,pref_talento,pref_famrica,pref_contact))
perc    =~ per_esfuerzo  + per_talento
pref    =~ pref_esfuerzo + pref_talento
no_perc =~ per_famrica   + per_contact
no_pref =~ pref_famrica  + pref_contact
no_perc~~no_pref
'
fit1 <- cfa(model = model1,data = data, ordered = c("per_esfuerzo","per_talento",
"pref_esfuerzo","pref_talento",
"per_famrica","per_contact" ,
"pref_famrica","pref_contact"))
summary(fit1, standardized =TRUE,fit.measures=TRUE)
fitMeasures(fit1,c("chisq","df","pvalue","cfi","tli","rmsea"))
fit1 <- cfa(model = model1,data = data, ordered = c("per_esfuerzo","per_talento",
"pref_esfuerzo","pref_talento",
"per_famrica","per_contact" ,
"pref_famrica","pref_contact"))
<
>
# CFA ---------------------------------------------------------------------
select(data, c(per_esfuerzo,per_talento,per_famrica,per_contact,pref_esfuerzo,pref_talento,pref_famrica,pref_contact))
<
>
fit1 <- cfa(model = model1,data = data, ordered = c("per_esfuerzo","per_talento",
"pref_esfuerzo","pref_talento",
"per_famrica","per_contact" ,
"pref_famrica","pref_contact"))
load(file = "data/pob_04.RData")
#Nota: Quedarme solamente con los datos completos para los ítems de la Escala
# -99 y -999 == NA --------------------------------------------------------
for (i in 1:ncol(data)) {
data[,i][data[,i] == c(-99)]  <- NA #Missing
data[,i][data[,i] == c(-999)] <- NA #Missing
}
summary(data)
names(data)
sjPlot::view_df(data)
# Nombres sustantivos variables -------------------------------------------
data <- rename(data,
per_esfuerzo =merit_perc_pref_1,
per_talento  =merit_perc_pref_2,
per_famrica  =merit_perc_pref_3,
per_contact  =merit_perc_pref_4,
pref_esfuerzo=merit_perc_pref_5,
pref_talento =merit_perc_pref_13,
pref_famrica =merit_perc_pref_14,
pref_contact =merit_perc_pref_15,
reduc=pref_redis_taxB_1,
rsalu=pref_redis_taxB_2,
rpens=pref_redis_taxB_3,
rdesi=pref_redis_taxB_4)
data$per_esfuerzo <- as.numeric(data$per_esfuerzo )
data$per_talento  <- as.numeric(data$per_talento  )
data$per_famrica  <- as.numeric(data$per_famrica  )
data$per_contact  <- as.numeric(data$per_contact  )
data$pref_esfuerzo<- as.numeric(data$pref_esfuerzo)
data$pref_talento <- as.numeric(data$pref_talento )
data$pref_famrica <- as.numeric(data$pref_famrica )
data$pref_contact <- as.numeric(data$pref_contact )
# Brechas -----------------------------------------------------------------
data$gap_per <- as.numeric(data$salary_perc_1/data$salary_perc_2)
data$gap_jus <- as.numeric(data$salary_just_1/data$salary_just_2)
data$lngap_per <- as.numeric(log(data$salary_perc_1/data$salary_perc_2))
data$lngap_jus <- as.numeric(log(data$salary_just_1/data$salary_just_2))
# Redistribución  ---------------------------------------------------------
data$reduc <- as.numeric(data$reduc)
data$rsalu <- as.numeric(data$rsalu)
data$rpens <- as.numeric(data$rpens)
data$rdesi <- as.numeric(data$rdesi)
# Correlacion items escala meritocracia -----------------------------------
cor(x = select(data, c(per_esfuerzo,per_talento,per_famrica,per_contact,pref_esfuerzo,pref_talento,pref_famrica,pref_contact)),use = "complete.obs")
poly1 <- psych::polychoric(select(.data = data, c(per_esfuerzo,per_talento,per_famrica,per_contact,pref_esfuerzo,pref_talento,pref_famrica,pref_contact)),na.rm = TRUE)
corrplot::corrplot(poly1$rho,order = "AOE", type = "lower")
# EFA ---------------------------------------------------------------------
fa1 <- fa(r = poly1$rho,nfactors = 4,rotate = "varimax",fm = "ml")
fa1$loadings
# CFA ---------------------------------------------------------------------
select(data, c(per_esfuerzo,per_talento,per_famrica,per_contact,pref_esfuerzo,pref_talento,pref_famrica,pref_contact))
model1<- '
perc    =~ per_esfuerzo  + per_talento
pref    =~ pref_esfuerzo + pref_talento
no_perc =~ per_famrica   + per_contact
no_pref =~ pref_famrica  + pref_contact
no_perc~~no_pref
'
fit1 <- cfa(model = model1,data = data, ordered = c("per_esfuerzo","per_talento",
"pref_esfuerzo","pref_talento",
"per_famrica","per_contact" ,
"pref_famrica","pref_contact"))
library(lavaan)
fit1 <- cfa(model = model1,data = data, ordered = c("per_esfuerzo","per_talento",
"pref_esfuerzo","pref_talento",
"per_famrica","per_contact" ,
"pref_famrica","pref_contact"))
summary(fit1, standardized =TRUE,fit.measures=TRUE)
library(haven)
library(dplyr)
library(sjPlot)
library(psych)
library(lavaan)
library(here)
rm(list=ls())
setwd(here())
load(file = "data/pob_04.RData")
for (i in 1:ncol(data)) {
data[,i][data[,i] == c(-99)]  <- NA #Missing
data[,i][data[,i] == c(-999)] <- NA #Missing
}
summary(data)
names(data)
sjPlot::view_df(data)
# Nombres sustantivos variables -------------------------------------------
data <- rename(data,
per_esfuerzo =merit_perc_pref_1,
per_talento  =merit_perc_pref_2,
per_famrica  =merit_perc_pref_3,
per_contact  =merit_perc_pref_4,
pref_esfuerzo=merit_perc_pref_5,
pref_talento =merit_perc_pref_13,
pref_famrica =merit_perc_pref_14,
pref_contact =merit_perc_pref_15,
reduc=pref_redis_taxB_1,
rsalu=pref_redis_taxB_2,
rpens=pref_redis_taxB_3,
rdesi=pref_redis_taxB_4)
data$per_esfuerzo <- as.numeric(data$per_esfuerzo )
data$per_talento  <- as.numeric(data$per_talento  )
data$per_famrica  <- as.numeric(data$per_famrica  )
data$per_contact  <- as.numeric(data$per_contact  )
data$pref_esfuerzo<- as.numeric(data$pref_esfuerzo)
data$pref_talento <- as.numeric(data$pref_talento )
data$pref_famrica <- as.numeric(data$pref_famrica )
data$pref_contact <- as.numeric(data$pref_contact )
# Brechas -----------------------------------------------------------------
data$gap_per <- as.numeric(data$salary_perc_1/data$salary_perc_2)
data$gap_jus <- as.numeric(data$salary_just_1/data$salary_just_2)
data$lngap_per <- as.numeric(log(data$salary_perc_1/data$salary_perc_2))
data$lngap_jus <- as.numeric(log(data$salary_just_1/data$salary_just_2))
# Redistribución  ---------------------------------------------------------
data$reduc <- as.numeric(data$reduc)
data$rsalu <- as.numeric(data$rsalu)
data$rpens <- as.numeric(data$rpens)
data$rdesi <- as.numeric(data$rdesi)
# Correlacion items escala meritocracia -----------------------------------
cor(x = select(data, c(per_esfuerzo,per_talento,per_famrica,per_contact,pref_esfuerzo,pref_talento,pref_famrica,pref_contact)),use = "complete.obs")
poly1 <- psych::polychoric(select(.data = data, c(per_esfuerzo,per_talento,per_famrica,per_contact,pref_esfuerzo,pref_talento,pref_famrica,pref_contact)),na.rm = TRUE)
corrplot::corrplot(poly1$rho,order = "AOE", type = "lower")
# EFA ---------------------------------------------------------------------
fa1 <- fa(r = poly1$rho,nfactors = 4,rotate = "varimax",fm = "ml")
fa1$loadings
# CFA ---------------------------------------------------------------------
select(data, c(per_esfuerzo,per_talento,per_famrica,per_contact,pref_esfuerzo,pref_talento,pref_famrica,pref_contact))
model1<- '
perc    =~ per_esfuerzo  + per_talento
pref    =~ pref_esfuerzo + pref_talento
no_perc =~ per_famrica   + per_contact
no_pref =~ pref_famrica  + pref_contact
no_perc~~no_pref
'
library(lavaan)
fit1 <- cfa(model = model1,data = data, ordered = c("per_esfuerzo","per_talento",
"pref_esfuerzo","pref_talento",
"per_famrica","per_contact" ,
"pref_famrica","pref_contact"))
summary(fit1, standardized =TRUE,fit.measures=TRUE)
fitMeasures(fit1,c("chisq","df","pvalue","cfi","tli","rmsea"))
fitMeasures(fit1,c("chisq","df","pvalue","cfi","tli","rmsea"))
modelp1 <- semPlot::semPaths(fit1,
what = "std",
layout = "tree2",
style = "lisrel",
curvature = 3,
residuals = TRUE,
intercepts = FALSE,
thresholds = FALSE)
modelp1
fitMeasures(fit1,c("chisq","df","pvalue","cfi","tli","rmsea"))
rmarkdown::render('pre-reg_merir-scale.rmd', output_format = 'all')
setwd("C:/Users/Usuario/Dropbox/01 Fondecyt Meritocracia/merit-scale")
rmarkdown::render('pre-reg_merir-scale.rmd', output_format = 'all')
rmarkdown::render('index.rmd', output_format = 'all')
rmarkdown::clean_site()
rmarkdown::render('index.rmd', output_format = 'all')
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(knitr)
library(kableExtra)
tab01 <- read.csv(file = "materials/table01.csv")
tab01 <- read.csv(file = "materials/table01.csv",header = TRUE,sep = ",")
tab01 <- read.csv(file = "materials/table01.csv",header = 1,sep = ";",)
tab01
kable(tab01)
# Get output document type and use as the format argument in kable function
table_format = if(is_html_output()) {
"html"
} else if(is_latex_output()) {
"latex"
}
table_format
kable(tab01,format = table_format)
rmarkdown::render('index.rmd', output_format = 'all')
kable(tab01,format = table_format) %>% kable_styling(full_width = F)
kable(tab01,format = table_format) %>% kable_styling(full_width = F)
rmarkdown::render('index.rmd', output_format = 'all')
kable(tab01,format = table_format,
booktabs = T, linesep = "") %>% kable_styling(full_width = F)
booktabs = T, linesep = "") %>% kable_styling(full_width = F)
rmarkdown::render('index.rmd', output_format = 'all')
rmarkdown::render('index.rmd', output_format = 'all')
rmarkdown::render('index.rmd', output_format = 'all')
rmarkdown::render('index.rmd', output_format = 'all')
kable(tab01,format = table_format,
booktabs = T,linesep = '') %>% kable_styling(full_width = T,
latex_options = c("hold_position","scale_down"),
position = "center")
rmarkdown::render('index.rmd', output_format = 'pdf')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
# Get output document type and use as the format argument in kable function
table_format = if(is_html_output()) {
"html"
} else if(is_latex_output()) {
"latex"
}
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::clean_site()
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
kable(tab01,format = table_format,
booktabs = T, align = "ll") %>% kable_styling(full_width = T,latex_options = c("hold_position","scale_down"),position = "center",font_size = 10) %>%
column_spec(column = 1,width = "1.5cm") %>%
column_spec(column = 2,width = "2 cm") %>%
collapse_rows(columns = 1:2,valign = "middle")
kable(tab01,format = table_format,
booktabs = T, align = c("ll")) %>% kable_styling(full_width = T,latex_options = c("hold_position","scale_down"),position = "center",font_size = 10) %>%
column_spec(column = 1,width = "1.5cm") %>%
column_spec(column = 2,width = "2 cm") %>%
collapse_rows(columns = 1:2,valign = "middle")
kable(tab01,format = table_format,
booktabs = T, align ="l") %>% kable_styling(full_width = T,latex_options = c("hold_position","scale_down"),position = "center",font_size = 10) %>%
column_spec(column = 1,width = "1.5cm") %>%
column_spec(column = 2,width = "2 cm") %>%
collapse_rows(columns = 1:2,valign = "middle")
kable(tab01,format = table_format,
booktabs = T, align ="lccc") %>% kable_styling(full_width = T,latex_options = c("hold_position","scale_down"),position = "center",font_size = 10) %>%
column_spec(column = 1,width = "1.5cm") %>%
column_spec(column = 2,width = "2 cm") %>%
collapse_rows(columns = 1:2,valign = "middle")
kable(tab01,format = table_format,
booktabs = T, align =c("cccc")) %>% kable_styling(full_width = T,latex_options = c("hold_position","scale_down"),position = "center",font_size = 10) %>%
column_spec(column = 1,width = "1.5cm") %>%
column_spec(column = 2,width = "2 cm") %>%
collapse_rows(columns = 1:2,valign = "middle")
kable(tab01,format = table_format,
booktabs = T, align =c("llll")) %>% kable_styling(full_width = T,latex_options = c("hold_position","scale_down"),position = "center",font_size = 10) %>%
column_spec(column = 1,width = "1.5cm") %>%
column_spec(column = 2,width = "2 cm") %>%
collapse_rows(columns = 1:2,valign = "middle")
kable(tab01,format = table_format,
booktabs = T, align ="llll") %>% kable_styling(full_width = T,latex_options = c("hold_position","scale_down"),position = "center",font_size = 10) %>%
column_spec(column = 1,width = "1.5cm") %>%
column_spec(column = 2,width = "2 cm") %>%
collapse_rows(columns = 1:2,valign = "middle")
kable(tab01,format = table_format,
booktabs = T, align =l) %>% kable_styling(full_width = T,latex_options = c("hold_position","scale_down"),position = "center",font_size = 10) %>%
column_spec(column = 1,width = "1.5cm") %>%
column_spec(column = 2,width = "2 cm") %>%
collapse_rows(columns = 1:2,valign = "middle")
rmarkdown::render('index.rmd', output_format = 'pdf_document')
?kable()
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
cnames <- c("Dimension", "Factor","Statement (english)" , "Statement (spanish)")
kable(tab01,format = table_format,booktabs = T, align ="l",linesep = "",col.names = cnames) %>%
kable_styling(full_width = T,latex_options = c("hold_position","scale_down"),position = "center",font_size = 9) %>%
column_spec(column = 1,width = "1.5cm",) %>%
column_spec(column = 2,width = "2 cm") %>%
collapse_rows(columns = 1:2,valign = "middle")
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'pdf_document')
rmarkdown::render('index.rmd', output_format = 'all')
rmarkdown::render('index.rmd', output_format = 'all')
rmarkdown::render('index.rmd', output_format = 'html_document')
rmarkdown::render('index.rmd', output_format = 'html_document')
rmarkdown::render('index.rmd', output_format = 'all')
knitr::opts_chunk$set(echo = TRUE)
# Get output document type and use as the format argument in kable function
table_format = if(is_html_output()) {
"html"
} else if(is_latex_output()) {
"latex"
}
rmarkdown::render('index.rmd', output_format = 'all')
rmarkdown::render('index.rmd', output_format = 'all')
